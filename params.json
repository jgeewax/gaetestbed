{"name":"GAE Testbed","body":"# GAE Testbed\r\n\r\nThe full documentation for this project is located [http://gaetestbed.geewax.org/index.html](http://gaetestbed.geewax.org/index.html)\r\n\r\n## Special note\r\n\r\nNow that I work for Google, 20% of my time is spent porting GAE Testbed to be part of the Python SDK. As a result, don't expect many new features on this project...\r\n\r\n## Introduction\r\nWriting tests for AppEngine applications seems more difficult to me than it\r\nshould be. This project is a set of base test cases to make it simple to test\r\nthe more complicated pieces of !AppEngine's framework (such as sending E-mail\r\nmessages, the datastore, Memcache, etc).\r\n\r\n### How to get it...\r\n\r\n    $ sudo easy_install gaetestbed\r\n\r\n### How to run it...\r\n\r\n    $ nosetests --with-gae\r\n\r\n## Test Showcase\r\n\r\nHere are a few examples of how GAETestbed makes testing the complicated parts of !AppEngine really simple.\r\n\r\n### Testing that E-mail was Sent\r\nas seen on [StackOverflow](http://stackoverflow.com/questions/427400/unit-testing-and-mocking-email-sender-in-python-with-google-appengine/1411769#1411769)\r\n\r\n\r\n    import unittest\r\n    from gaetestbed import MailTestCase\r\n\r\n    class MyTestCase(MailTestCase, unittest.TestCase):\r\n        def test_email_sent(self):\r\n            send_email_to('test@example.org') # Some method that sends e-mail...\r\n            self.assertEmailSent(to='test@example.org')\r\n            self.assertEqual(len(self.get_sent_messages()), 1)\r\n\r\n### Testing that Memcache was Hit\r\n\r\n    import unittest\r\n    from gaetestbed import MemcacheTestCase\r\n\r\n    class MyTestCase(MemcacheTestCase, unittest.TestCase):\r\n    def test_memcache_gets_hit(self):\r\n        self.assertMemcacheItems(0)\r\n        self.assertMemcacheHits(0)\r\n        \r\n        add_to_memcache('something', 'something') # Add something to memcache somehow...\r\n        self.assertMemcacheItems(1)\r\n        self.assertMemcacheHits(0)\r\n        \r\n        get_page('/page_that_hits_memcache/')\r\n        self.assertMemcacheItems(1)\r\n        self.assertMemcacheHits(1)\r\n\r\n### Testing that Tasks were added to the Task Queue\r\n\r\n    import unittest\r\n    from gaetestbed import TaskQueueTestCase\r\n\r\n    class MyTestCase(TaskQueueTestCase, unittest.TestCase):\r\n        def test_taskqueue(self):\r\n            # Check that nothing is in the queue\r\n            self.assertTasksInQueue(0)\r\n            \r\n            # Add something to a Queue\r\n            add_to_taskqueue(url='/worker/dummy/')\r\n            \r\n            # Checks that there are things in the queue\r\n            self.assertTasksInQueue()\r\n            \r\n            # Checks exactly one item in the queue\r\n            self.assertTasksInQueue(1)\r\n            \r\n            # Checks that 1 item with the specified URL is in the queue\r\n            self.assertTasksInQueue(1, url='/worker/dummy/')\r\n\r\n### Testing that stuff was saved to the Datastore\r\n(Most of this is provided thanks to NoseGAE.)\r\n\r\n    import unittest\r\n    from gaetestbed import DataStoreTestCase\r\n    from myproject.models import MyModel\r\n\r\n    class MyTestCase(DataStoreTestCase, unittest.TestCase):\r\n        def test_datastore_gets_hit(self):\r\n            self.assertEqual(MyModel.all().count(), 0)\r\n            \r\n            MyModel(name='Name').put()\r\n            self.assertEqual(MyModel.all().count(), 1)\r\n        \r\n        def test_datastore_still_empty(self):\r\n            self.assertEqual(MyModel.all().count(), 0)\r\n\r\n### Optimization testing, test number of DataStore queries\r\n\r\n    from __future__ import with_statement\r\n    import unittest\r\n    from gaetestbed import DataStoreTestCase\r\n    from myproject.models import MyModel\r\n\r\n    class MyTestCase(DataStoreTestCase, unittest.TestCase):\r\n        def test_num_queries(self):\r\n            self.assertEqual(MyModel.all().count(), 0)\r\n            \r\n            # Check that no more than 1 query is run in this block of code\r\n            with self.max_queries(1):\r\n                MyModel(name='Name').put()\r\n        \r\n        def test_query_count(self):\r\n            self.assertEqual(MyModel.all().count(), 0)\r\n            \r\n            MyModel(name='Name').put()\r\n            self.assertEqual(MyModel.all().count(), 1)\r\n            \r\n            # Check that the number of queries total for this test case is under 100\r\n            self.assertTrue(self.query_count < 100)\r\n\r\n### Web Testing\r\n(Most of this is provided thanks to WebTest.)\r\n\r\n    import unittest\r\n    from gaetestbed import WebTestCase, DataStoreTestCase\r\n    from handlers import application # (application should be a WSGI app)\r\n\r\n    class MyTestCase(WebTestCase, DataStoreTestCase, unittest.TestCase):\r\n        APPLICATION = application\r\n        \r\n        def test_get_redirects(self):\r\n            response = self.get('/')\r\n            self.assertRedirects(response)\r\n        \r\n        def test_post_creates_model(self):\r\n            self.assertEqual(MyModel.all().count(), 0)\r\n            \r\n            data = {'name': 'Name'}\r\n            response = self.post('/create-my-model/', data=data)\r\n            self.assertRedirects(response)\r\n            self.assertEqual(MyModel.all().count(), 1)\r\n        \r\n        def test_get_with_cookie(self):\r\n            response = self.get('/')\r\n            self.assertRedirects(response)\r\n            \r\n            self.set_cookie('session_id', 'secret')\r\n            response = self.get('/')\r\n            self.assertOK(response)\r\n        \r\n        def test_cookies_cleared_between_tests(self):\r\n            session_id = self.get_cookie('session_id')\r\n            self.assertEqual(session_id, None)\r\n\r\n### Mixing them All together\r\n#### A \"Unit\" test case\r\n`UnitTestCase` has all of the basics except `WebTestCase`. This makes it useful\r\nfor testing your models and library methods.\r\n\r\n    import unittest\r\n    from gaetestbed import UnitTestCase\r\n    from myproject.models import MyModel\r\n\r\n    class MyTestCase(UnitTestCase, unittest.TestCase):\r\n        def test_memcache_gets_hit(self):\r\n            self.assertMemcacheHits(0)\r\n        \r\n        def test_datastore_gets_hit(self):\r\n            MyModel(name='Name').put()\r\n            self.assertEqual(MyModel.all().count(), 1)\r\n        \r\n        def test_email_sent(self):\r\n            # (Send an e-mail)\r\n            self.assertEmailSent()\r\n\r\n#### A \"Functional\" test case\r\n`FunctionalTestCase` has everything the `UnitTestCase` does, with the addition\r\nof `WebTestCase` for testing web interactions using !WebTest.\r\n\r\n    import unittest\r\n    from gaetestbed import FunctionalTestCase\r\n    from myproject.models import MyModel\r\n    from handlers import application # (application should be a WSGI app)\r\n\r\n    class MyTestCase(FunctionalTestCase, unittest.TestCase):\r\n        APPLICATION = application\r\n        \r\n        def test_memcache_gets_hit(self):\r\n            self.assertMemcacheHits(0)\r\n        \r\n        def test_datastore_gets_hit(self):\r\n            MyModel(name='Name').put()\r\n            self.assertEqual(MyModel.all().count(), 1)\r\n        \r\n        def test_email_sent(self):\r\n            # (Send an e-mail)\r\n            self.assertEmailSent()\r\n        \r\n        def test_get_redirects(self):\r\n            response = self.get('/')\r\n            self.assertRedirects(response)\r\n        \r\n        def test_post_creates_model(self):\r\n            self.assertEqual(MyModel.all().count(), 0)\r\n            \r\n            data = {'name': 'Name'}\r\n            response = self.post('/create-my-model/', data=data)\r\n            self.assertRedirects(response)\r\n            self.assertEqual(MyModel.all().count(), 1)\r\n\r\n## Dependencies\r\nThis set of cases was designed to run with [NoseGAE](http://code.google.com/p/nose-gae/),\r\nso to run the tests that way you'll probably want to download an install it.\r\nAdditionally, to run the functional (web) tests, you'll need to grab\r\n[WebTest](http://pythonpaste.org/webtest/). Both of these are easy-installable:\r\n\r\n\r\n    $ sudo easy_install nose\r\n    $ sudo easy_install nosegae\r\n    $ sudo easy_install webtest\r\n\r\n## Benefits\r\n * Each test is sandboxed so that you can assume all of the services are empty\r\n   when you start your test. This way, there's no need to worry about cleaning\r\n   up data between tests.\r\n * Helper assert methods that simplify testing such as `assertMailSent()` or\r\n   `assertMemcacheHits()`\r\n\r\n## Feedback, etc\r\n * If you find a bug with the testbed, open a ticket [here](http://github.com/jgeewax/gaetestbed/issues).\r\n   All tickets are really appreciated.\r\n * If there's already a ticket that you'd like to see done faster, star the ticket\r\n   and it will get more attention. Patches are always appreciated too :)\r\n\r\n## Thanks\r\n * Thanks for Jason Pellerin and Kumar McMillan for their work on Nose and NoseGAE.\r\n * Thanks to Ian Bicking for his work on WebTest\r\n\r\n","tagline":"A suite of base test cases that simplify automated testing for App Engine applications.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}